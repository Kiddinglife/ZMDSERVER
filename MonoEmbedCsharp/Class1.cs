using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace KBEngine
{
	//----------------------------------------------------------------------------
	// This is autogenerated code by CppSharp.
	// Do not edit this file or all your changes will be lost after re-generation.
	//----------------------------------------------------------------------------
	using System;
	using System.Runtime.InteropServices;
	using System.Security;

	//----------------------------------------------------------------------------
	// This is autogenerated code by CppSharp.
	// Do not edit this file or all your changes will be lost after re-generation.
	//----------------------------------------------------------------------------
	using System;
	using System.Runtime.InteropServices;
	using System.Security;


	public unsafe partial class hello : IDisposable
	{
		[StructLayout(LayoutKind.Explicit, Size = 8)]
		public partial struct Internal
		{
			[FieldOffset(0)]
			public int a;

			[FieldOffset(4)]
			public float b;

			[SuppressUnmanagedCodeSecurity]
			[DllImport("Hello.Native")]
			internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

			[SuppressUnmanagedCodeSecurity]
			[DllImport("Hello.Native")]
			internal static extern void say_0(global::System.IntPtr instance);
		}

		public global::System.IntPtr __Instance { get; protected set; }

		private readonly bool __allocatedWithHGlobal;

		internal hello(hello.Internal* native)
			: this(new global::System.IntPtr(native), (hello.Internal*)null)
		{
		}

		private static global::System.IntPtr __CopyValue(hello.Internal native)
		{
			global::System.IntPtr ret = Marshal.AllocHGlobal(8);
			*(hello.Internal*)ret = native;
			return ret;
		}

		internal hello(hello.Internal native)
			: this(__CopyValue(native), (hello.Internal*)null)
		{
			__allocatedWithHGlobal = true;
		}

		public hello(global::System.IntPtr native, hello.Internal* dummy, bool isInternalImpl = false)
		{
			__Instance = native;
		}

		public hello()
		{
			__Instance = Marshal.AllocHGlobal(8);
			__allocatedWithHGlobal = true;
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool disposing)
		{
			if (__allocatedWithHGlobal)
			{
				Marshal.FreeHGlobal(__Instance);
			}
		}

		public void say()
		{
			Internal.say_0(__Instance);
		}

		public int a
		{
			get
			{
				var __ptr = (Internal*)__Instance.ToPointer();
				return __ptr->a;
			}

			set
			{
				var __ptr = (Internal*)__Instance.ToPointer();
				__ptr->a = value;
			}
		}

		public float b
		{
			get
			{
				var __ptr = (Internal*)__Instance.ToPointer();
				return __ptr->b;
			}

			set
			{
				var __ptr = (Internal*)__Instance.ToPointer();
				__ptr->b = value;
			}
		}
	}



	public class Base
	{
		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public Base();
		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public Base(int a);

		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public int TestFun(IntPtr wrapper, float z);
		static readonly IntPtr TestFun_wrapper;
		public int TestFun(float z)
		{
			return TestFun(TestFun_wrapper, z);
		}

		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public string strfunc(IntPtr wrapper, string param);
		static readonly IntPtr strfunc_wrapper;
		public virtual string strfunc(string param)
		{
			return strfunc(strfunc_wrapper, param);
		}

		//[MethodImplAttribute(MethodImplOptions.InternalCall)]
		//extern public int TestFun(float z);
		static readonly IntPtr get_bb_wrapper;
		static readonly IntPtr set_bb_wrapper;

		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public int get_bb(IntPtr wrapper);
		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public int set_bb(IntPtr wrapper, int value);

		public int bb
		{
			get { return get_bb(get_bb_wrapper); }
			set { set_bb(set_bb_wrapper, value); }
		}

		public IntPtr _native;
	}

	class TestClass3
	{
		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public TestClass3();

		[MethodImplAttribute(MethodImplOptions.InternalCall)]
		extern public int TestFun3(IntPtr wrapper, Base test);
		static readonly IntPtr TestFun3_wrapper;
		public int TestFun3(Base test)
		{
			return TestFun3(TestFun3_wrapper, test);
		}

		public IntPtr _native;
	}

	public class MyBase : Base
	{
		public string strfunc(string param)
		{
			return base.strfunc("hello base");
		}
	}
	public class TestClass
	{
		int b;
		KBEngine.Base tc2;
		KBEngine.Base tc3;
		KBEngine.TestClass3 tc4;
		KBEngine.Base tc5;
		KBEngine.hello tc6;

		//delegate int MyCallback1();
		//[DllImport("MyRuntime")]
		//public extern static void RegisterCallback(MyCallback1 callback1);

		public TestClass()
		{
			bb = 2131;
			tc2 = new KBEngine.Base(30);
			tc3 = new KBEngine.Base(40);
			tc4 = new KBEngine.TestClass3();
			tc5 = new KBEngine.MyBase();
			tc6 = new KBEngine.hello();
			//RegisterCallback(test);
		}
		public int bb
		{
			get { return b; }
			set { b = value; }
		}
		public void test()
		{
			tc6.say();
			//tc5.TestFun(12f);
			//tc5.strfunc("hello");
			//MonoEmbed.static_function(2f);
			//MonoEmbed.gimme(2);
		}

		public void untank()
		{
			Console.WriteLine("untank");
		}
	}
}

public class MonoEmbed
{
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	public extern static string gimme(int a);

	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	public extern static int static_function(float a);

}

